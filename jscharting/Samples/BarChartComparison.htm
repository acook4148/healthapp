<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Animated Comparison | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/types.js"></script>
    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      /*CSS*/
    </style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 700px; height: 260px; margin: 0 auto;"></div>

    <script type="text/javascript">
      /*
An interactive animated bar chart comparing two data sets by user selection.
Learn how to:

  - Update full stacked bars to compare two scenarios.
*/
      // JS
      var chart, data;
      var palette = ['#4A7C59', '#8FC0A9'];

      /* Resembles underline Used to highlight selected label. */
      var selectedFill = {
        angle: 90,
        stops: [
          [0, '#ffffff'],
          [0.94, '#ffffff'],
          [0.94, '#000000'],
          [1, '#000000'],
        ],
      };

      JSC.fetch('./resources/us-population-age-projected.csv')
        .then(function (response) {
          return response.text();
        })
        .then(function (text) {
          data = JSC.csv2Json(text);
          chart = renderChart(makeSeries(data, 2020));
        })
        .catch(function (error) {
          console.error(error);
        });

      function renderChart(series) {
        return JSC.chart('chartDiv', {
          title: {
            label: {
              text: 'Nearly a quarter of the U.S. population will be over 65 by 2060',
              margin: [0, 0, 25, 50],
            },
          },
          animation_duration: 500,
          palette: palette,
          defaultSeries: {
            legendEntry_events_click: function () {
              return false;
            },
            mouseTracking_enabled: false,
          },
          defaultPoint: {
            outline_width: 0,
            label: {
              text: '%yValue%',
              placement: 'outside',
              autoHide: false,
            },
          },
          type: 'horizontal column solid',
          legend: {
            position: 'bottom',
            template: '%icon %name',
            defaultEntry_cursor: 'default',
          },
          xAxis: {
            staticColumnWidth: 20,
            // Use the axis ticks as labels for each column stack
            defaultTick: {
              gridLine_visible: false,
              placement: 'inside',
              label_offset: '50,22',
            },
          },
          yAxis: {
            visible: false,
            scale: {
              type: 'stackedFull',
              /* Pad the axis range so that outside point labels fit inside the chart */
              range_padding: 0.1,
              invert: true,
            },
          },
          series: series,
          toolbar_items: {
            beforeAfterButtons: {
              label_text: '',
              position: 'inside top left',
              offset: '50,-25',
              itemsBox: {
                layout: 'horizontal',
                visible: true,
              },
              defaultItem: {
                type: 'radio',
                padding: [0, 0, 4, -20],
                margin: 3,
                label_style: { fontSize: 14, color: '#9E9E9E' },
                icon_visible: false,
                states: {
                  select: {
                    fill: selectedFill,
                    label_style: { color: '#000000' },
                  },
                  hover_fill: selectedFill,
                },
              },
              events: { change: changeEvent },
              value: '2020',
              items: {
                '2020': { label_text: '2020' },
                '2060': { label_text: '2060' },
              },
            },
          },
        });
      }

      function changeEvent(val) {
        chart.options({ series: makeSeries(data, val) });
      }

      function makeSeries(data, year) {
        return JSC.nest()
          .key('age')
          .key('sex')
          .pointRollup(function (key, val) {
            var value = val[0],
              over65 = value.age === '65 years and over';
            return {
              x: key,
              id: key + ' ' + value.age,
              y: value['year_' + year],
              label_align: over65 ? 'left' : 'right',
            };
          })
          .series(data);
      }
    </script>
  </body>
</html>
