<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Dependency Highlighting Gantt Chart | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      /*CSS*/
    </style>
  </head>
  <body>
    <div id="chartDiv" style="width: 940px; height: 600px; margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
Advanced Gantt chart with descriptive axis tick label columns and gantt dependencies for critical path analysis.
Learn how to:

  - Create a gantt chart with axis tick descriptions.
  - Create a gantt chart with dependencies.
*/
      // JS
      var chart;
      var palette = ['#ECEFF1', '#B0BEC5', '#78909C', '#546E7A', '#37474F', 'black'];
      var highlightUpColor = '#f66a29',
        highlightDownColor = '#29B6F6';

      // Reusable functions to create any axis tick data grid.
      var span = function (val, width) {
        return '<span style="width:' + width + 'px;">' + val + '</span>';
      };
      var columnWidths = [35, 140, 40];
      var mapLabels = function (labels) {
        return labels
          .map(function (v, i) {
            return span(v, columnWidths[i]);
          })
          .join('');
      };

      // Custom templates
      var tickTemplate = mapLabels(['%section', '%xValue', '{days(%high-%low):n1}d']);
      var tickTemplateBold = '<b>' + tickTemplate + '</b>';
      var headerTemplate = '<b>' + mapLabels([' ', 'Task', 'Days']) + '</b>';

      JSC.fetch('./resources/gameDev.csv')
        .then(function (response) {
          return response.text();
        })
        .then(function (text) {
          chart = renderChart(JSC.csv2Json(text));
        });

      function renderChart(data) {
        return JSC.chart('chartDiv', {
          defaultBox_boxVisible: false,
          animation_duration: 0,
          type: 'horizontal column solid',
          title_label_text: 'Project Alpha',
          zAxis_scale_type: 'stacked',
          yAxis_scale_type: 'time',
          palette: palette,
          annotations: [
            {
              label_text: headerTemplate,
              position: '-6,40',
            },
            {
              label_text: 'Hover on points or legend entry to view highlighted dependency paths',
              position: 'inside top right',
            },
          ],
          legend: {
            position: 'top',
            template: '%icon %name',
            defaultEntry: {
              cursor: 'default',
              events: {
                mouseOver: function () {
                  var series = this.target;
                  series.points && pointOver.call(series.points(0));
                  return false;
                },
                mouseOut: function () {
                  var series = this.target;
                  series.points && pointOut.call(series.points(0));
                  return false;
                },
                /* Disable hiding series on click*/
                click: function () {
                  return false;
                },
              },
            },
            customEntries: [
              { name: 'Prior Task', icon_outline_color: highlightUpColor },
              { name: 'Future Task', icon_outline_color: highlightDownColor },
            ],
          },
          series: getSeries(data),
          defaultSeries: {
            defaultPoint: {
              tooltip: '<b>%name</b><br>%yStart - %yValue<br>',
              xAxisTick: {
                label_text: tickTemplate,
                events: {
                  mouseOver: disableFn,
                  mouseOut: disableFn,
                },
              },
              marker_visible: false,
              focusGlow: false,
              states: {
                select: {
                  // Ensure select styles are generated despite not being enabled with point clicks.
                  enabled: true,
                  opacity: 1,
                  outline: { color: highlightUpColor },
                },
                mute: {
                  enabled: true,
                  opacity: 1,
                  outline: { color: highlightDownColor, width: 2 },
                },
              },
              events: {
                mouseOver: pointOver,
                mouseOut: pointOut,
              },
            },
            firstPoint: {
              label_text: '%name',
              xAxisTick: {
                label_text: tickTemplateBold,
                events: {
                  mouseOver: disableFn,
                  mouseOut: disableFn,
                },
              },
            },
          },
        });
      }

      function disableFn() {
        return false;
      }

      function pointOver() {
        var point = this,
          chart = point.chart;

        highlightUp(point.id);
        highlightDown(point.id);

        chart.series().points(point.id).options({ selected: true, muted: false });

        function highlightUp(id) {
          chart.connectors([id, 'up'], { color: highlightUpColor });
          chart.series().points([id, 'up']).options({ selected: true, muted: false });
        }

        function highlightDown(id) {
          chart.connectors([id, 'down'], { color: highlightDownColor });
          chart.series().points([id, 'down']).options({ selected: false, muted: true });
        }
      }

      function pointOut() {
        var point = this;
        reset(point.chart);
        return false;
      }

      function reset(c) {
        c.connectors();
        c.series().points().options({ selected: false, muted: false });
      }

      function getSeries(data) {
        return (
          JSC.nest()
            .key('phase')
            .key('name')
            // Custom point configuration
            .pointRollup(function (key, vals) {
              var val = vals[0];
              var result = {
                id: val.id,
                name: val.name,
                parent: val.parent,
                y: [val.start, val.end],
                attributes_section: val.id.replace('s', ''),
              };
              // Column series data points as milestones
              if (val.start === val.end) {
                result.marker = { type: 'diamond', visible: true };
              }
              return result;
            })
            .series(data)
        );
      }
    </script>
  </body>
</html>
