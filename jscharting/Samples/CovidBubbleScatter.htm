<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Covid Bubble Scatter | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/maps.js"></script>
    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      #dashWrapper {
        max-width: 700px;
        margin: 0px auto;
      }
      #chartTitle1,
      #chartTitle2,
      #chartTitle3,
      #chartTitle4,
      #chartTitle5 {
        padding-left: 10px;
        font-size: 16px;
        color: black;
        padding-bottom: 5px;
      }
    </style>
  </head>
  <body>
    <div id="dashWrapper">
      <div id="bubbleScatter" style="height: auto;">
        <div id="firstChartWrapper3" class="firstChartWrapper">
          <div id="chartTitle3" style="min-height: 24px;"></div>
          <div id="chartDiv3" style="height: 416px;"></div>
        </div>
        <div id="mapDiv3" style="height: 600px;"></div>
      </div>
    </div>

    <script type="text/javascript">
      /*
Animated bubble scatter chart showing COVID-19 active cases, confirmed cases and deaths by country over time.
Learn how to:

  - Make a dashboard scatter bubble chart.
*/
      // JS

      var dateCache = {};
      var tooltipPalette = [
        '#d53838', //Confirmed
        '#FF9800', //Active
        '#00C853', //Recovered
        '#212121',
      ];
      var countriesInfo = {
        Andorra: { flag: 'ğŸ‡¦ğŸ‡©', code: 'AD' },
        'United Arab Emirates': { flag: 'ğŸ‡¦ğŸ‡ª', code: 'AE' },
        Afghanistan: { flag: 'ğŸ‡¦ğŸ‡«', code: 'AF' },
        'Antigua and Barbuda': { flag: 'ğŸ‡¦ğŸ‡¬', code: 'AG' },
        Anguilla: { flag: 'ğŸ‡¦ğŸ‡®', code: 'AI' },
        Albania: { flag: 'ğŸ‡¦ğŸ‡±', code: 'AL' },
        Armenia: { flag: 'ğŸ‡¦ğŸ‡²', code: 'AM' },
        Angola: { flag: 'ğŸ‡¦ğŸ‡´', code: 'AO' },
        Antarctica: { flag: 'ğŸ‡¦ğŸ‡¶', code: 'AQ' },
        Argentina: { flag: 'ğŸ‡¦ğŸ‡·', code: 'AR' },
        'American Samoa': { flag: 'ğŸ‡¦ğŸ‡¸', code: 'AS' },
        Austria: { flag: 'ğŸ‡¦ğŸ‡¹', code: 'AT' },
        Australia: { flag: 'ğŸ‡¦ğŸ‡º', code: 'AU' },
        Aruba: { flag: 'ğŸ‡¦ğŸ‡¼', code: 'AW' },
        'Ã…land Islands': { flag: 'ğŸ‡¦ğŸ‡½', code: 'AX' },
        Azerbaijan: { flag: 'ğŸ‡¦ğŸ‡¿', code: 'AZ' },
        'Bosnia and Herzegovina': { flag: 'ğŸ‡§ğŸ‡¦', code: 'BA' },
        Barbados: { flag: 'ğŸ‡§ğŸ‡§', code: 'BB' },
        Bangladesh: { flag: 'ğŸ‡§ğŸ‡©', code: 'BD' },
        Belgium: { flag: 'ğŸ‡§ğŸ‡ª', code: 'BE' },
        'Burkina Faso': { flag: 'ğŸ‡§ğŸ‡«', code: 'BF' },
        Bulgaria: { flag: 'ğŸ‡§ğŸ‡¬', code: 'BG' },
        Bahrain: { flag: 'ğŸ‡§ğŸ‡­', code: 'BH' },
        Burundi: { flag: 'ğŸ‡§ğŸ‡®', code: 'BI' },
        Benin: { flag: 'ğŸ‡§ğŸ‡¯', code: 'BJ' },
        'Saint BarthÃ©lemy': { flag: 'ğŸ‡§ğŸ‡±', code: 'BL' },
        Bermuda: { flag: 'ğŸ‡§ğŸ‡²', code: 'BM' },
        Brunei: { flag: 'ğŸ‡§ğŸ‡³', code: 'BN' },
        Bolivia: { flag: 'ğŸ‡§ğŸ‡´', code: 'BO' },
        'Bonaire, Sint Eustatius and Saba': { flag: 'ğŸ‡§ğŸ‡¶', code: 'BQ' },
        Brazil: { flag: 'ğŸ‡§ğŸ‡·', code: 'BR' },
        Bahamas: { flag: 'ğŸ‡§ğŸ‡¸', code: 'BS' },
        Bhutan: { flag: 'ğŸ‡§ğŸ‡¹', code: 'BT' },
        'Bouvet Island': { flag: 'ğŸ‡§ğŸ‡»', code: 'BV' },
        Botswana: { flag: 'ğŸ‡§ğŸ‡¼', code: 'BW' },
        Belarus: { flag: 'ğŸ‡§ğŸ‡¾', code: 'BY' },
        Belize: { flag: 'ğŸ‡§ğŸ‡¿', code: 'BZ' },
        Canada: { flag: 'ğŸ‡¨ğŸ‡¦', code: 'CA' },
        'Cocos (Keeling) Islands': { flag: 'ğŸ‡¨ğŸ‡¨', code: 'CC' },
        'Congo (Kinshasa)': { flag: 'ğŸ‡¨ğŸ‡©', code: 'CD' },
        'Central African Republic': { flag: 'ğŸ‡¨ğŸ‡«', code: 'CF' },
        'Congo (Brazzaville)': { flag: 'ğŸ‡¨ğŸ‡¬', code: 'CG' },
        Switzerland: { flag: 'ğŸ‡¨ğŸ‡­', code: 'CH' },
        "Cote d'Ivoire": { flag: 'ğŸ‡¨ğŸ‡®', code: 'CI' },
        'Cook Islands': { flag: 'ğŸ‡¨ğŸ‡°', code: 'CK' },
        Chile: { flag: 'ğŸ‡¨ğŸ‡±', code: 'CL' },
        Cameroon: { flag: 'ğŸ‡¨ğŸ‡²', code: 'CM' },
        China: { flag: 'ğŸ‡¨ğŸ‡³', code: 'CN' },
        Colombia: { flag: 'ğŸ‡¨ğŸ‡´', code: 'CO' },
        'Costa Rica': { flag: 'ğŸ‡¨ğŸ‡·', code: 'CR' },
        Cuba: { flag: 'ğŸ‡¨ğŸ‡º', code: 'CU' },
        'Cabo Verde': { flag: 'ğŸ‡¨ğŸ‡»', code: 'CV' },
        CuraÃ§ao: { flag: 'ğŸ‡¨ğŸ‡¼', code: 'CW' },
        'Christmas Island': { flag: 'ğŸ‡¨ğŸ‡½', code: 'CX' },
        Cyprus: { flag: 'ğŸ‡¨ğŸ‡¾', code: 'CY' },
        Czechia: { flag: 'ğŸ‡¨ğŸ‡¿', code: 'CZ' },
        Germany: { flag: 'ğŸ‡©ğŸ‡ª', code: 'DE' },
        Djibouti: { flag: 'ğŸ‡©ğŸ‡¯', code: 'DJ' },
        Denmark: { flag: 'ğŸ‡©ğŸ‡°', code: 'DK' },
        Dominica: { flag: 'ğŸ‡©ğŸ‡²', code: 'DM' },
        'Dominican Republic': { flag: 'ğŸ‡©ğŸ‡´', code: 'DO' },
        'Cruise Ship': { flag: 'ğŸš¢' },
        Algeria: { flag: 'ğŸ‡©ğŸ‡¿', code: 'DZ' },
        Ecuador: { flag: 'ğŸ‡ªğŸ‡¨', code: 'EC' },
        Estonia: { flag: 'ğŸ‡ªğŸ‡ª', code: 'EE' },
        Egypt: { flag: 'ğŸ‡ªğŸ‡¬', code: 'EG' },
        'Western Sahara': { flag: 'ğŸ‡ªğŸ‡­', code: 'EH' },
        Eritrea: { flag: 'ğŸ‡ªğŸ‡·', code: 'ER' },
        Spain: { flag: 'ğŸ‡ªğŸ‡¸', code: 'ES' },
        Ethiopia: { flag: 'ğŸ‡ªğŸ‡¹', code: 'ET' },
        'European Union': { flag: 'ğŸ‡ªğŸ‡º', code: 'EU' },
        Finland: { flag: 'ğŸ‡«ğŸ‡®', code: 'FI' },
        Fiji: { flag: 'ğŸ‡«ğŸ‡¯', code: 'FJ' },
        'Falkland Islands (Malvinas)': { flag: 'ğŸ‡«ğŸ‡°', code: 'FK' },
        Micronesia: { flag: 'ğŸ‡«ğŸ‡²', code: 'FM' },
        'Faroe Islands': { flag: 'ğŸ‡«ğŸ‡´', code: 'FO' },
        France: { flag: 'ğŸ‡«ğŸ‡·', code: 'FR' },
        Gabon: { flag: 'ğŸ‡¬ğŸ‡¦', code: 'GA' },
        'United Kingdom': { flag: 'ğŸ‡¬ğŸ‡§', code: 'GB' },
        Grenada: { flag: 'ğŸ‡¬ğŸ‡©', code: 'GD' },
        Georgia: { flag: 'ğŸ‡¬ğŸ‡ª', code: 'GE' },
        'French Guiana': { flag: 'ğŸ‡¬ğŸ‡«', code: 'GF' },
        Guernsey: { flag: 'ğŸ‡¬ğŸ‡¬', code: 'GG' },
        Ghana: { flag: 'ğŸ‡¬ğŸ‡­', code: 'GH' },
        Gibraltar: { flag: 'ğŸ‡¬ğŸ‡®', code: 'GI' },
        Greenland: { flag: 'ğŸ‡¬ğŸ‡±', code: 'GL' },
        Gambia: { flag: 'ğŸ‡¬ğŸ‡²', code: 'GM' },
        Guinea: { flag: 'ğŸ‡¬ğŸ‡³', code: 'GN' },
        Guadeloupe: { flag: 'ğŸ‡¬ğŸ‡µ', code: 'GP' },
        'Equatorial Guinea': { flag: 'ğŸ‡¬ğŸ‡¶', code: 'GQ' },
        Greece: { flag: 'ğŸ‡¬ğŸ‡·', code: 'GR' },
        'South Georgia': { flag: 'ğŸ‡¬ğŸ‡¸', code: 'GS' },
        Guatemala: { flag: 'ğŸ‡¬ğŸ‡¹', code: 'GT' },
        Guam: { flag: 'ğŸ‡¬ğŸ‡º', code: 'GU' },
        'Guinea-Bissau': { flag: 'ğŸ‡¬ğŸ‡¼', code: 'GW' },
        Guyana: { flag: 'ğŸ‡¬ğŸ‡¾', code: 'GY' },
        'Hong Kong': { flag: 'ğŸ‡­ğŸ‡°', code: 'HK' },
        'Heard Island and Mcdonald Islands': { flag: 'ğŸ‡­ğŸ‡²', code: 'HM' },
        Honduras: { flag: 'ğŸ‡­ğŸ‡³', code: 'HN' },
        Croatia: { flag: 'ğŸ‡­ğŸ‡·', code: 'HR' },
        Haiti: { flag: 'ğŸ‡­ğŸ‡¹', code: 'HT' },
        Hungary: { flag: 'ğŸ‡­ğŸ‡º', code: 'HU' },
        Indonesia: { flag: 'ğŸ‡®ğŸ‡©', code: 'ID' },
        Ireland: { flag: 'ğŸ‡®ğŸ‡ª', code: 'IE' },
        Israel: { flag: 'ğŸ‡®ğŸ‡±', code: 'IL' },
        'Isle of Man': { flag: 'ğŸ‡®ğŸ‡²', code: 'IM' },
        India: { flag: 'ğŸ‡®ğŸ‡³', code: 'IN' },
        'British Indian Ocean Territory': { flag: 'ğŸ‡®ğŸ‡´', code: 'IO' },
        Iraq: { flag: 'ğŸ‡®ğŸ‡¶', code: 'IQ' },
        Iran: { flag: 'ğŸ‡®ğŸ‡·', code: 'IR' },
        Iceland: { flag: 'ğŸ‡®ğŸ‡¸', code: 'IS' },
        Italy: { flag: 'ğŸ‡®ğŸ‡¹', code: 'IT' },
        Jersey: { flag: 'ğŸ‡¯ğŸ‡ª', code: 'JE' },
        Jamaica: { flag: 'ğŸ‡¯ğŸ‡²', code: 'JM' },
        Jordan: { flag: 'ğŸ‡¯ğŸ‡´', code: 'JO' },
        Japan: { flag: 'ğŸ‡¯ğŸ‡µ', code: 'JP' },
        Kenya: { flag: 'ğŸ‡°ğŸ‡ª', code: 'KE' },
        Kyrgyzstan: { flag: 'ğŸ‡°ğŸ‡¬', code: 'KG' },
        Cambodia: { flag: 'ğŸ‡°ğŸ‡­', code: 'KH' },
        Kiribati: { flag: 'ğŸ‡°ğŸ‡®', code: 'KI' },
        Comoros: { flag: 'ğŸ‡°ğŸ‡²', code: 'KM' },
        'Saint Kitts and Nevis': { flag: 'ğŸ‡°ğŸ‡³', code: 'KN' },
        'North Korea': { flag: 'ğŸ‡°ğŸ‡µ', code: 'KP' },
        'Korea, South': { flag: 'ğŸ‡°ğŸ‡·', code: 'KR' },
        Kuwait: { flag: 'ğŸ‡°ğŸ‡¼', code: 'KW' },
        'Cayman Islands': { flag: 'ğŸ‡°ğŸ‡¾', code: 'KY' },
        Kazakhstan: { flag: 'ğŸ‡°ğŸ‡¿', code: 'KZ' },
        Laos: { flag: 'ğŸ‡±ğŸ‡¦', code: 'LA' },
        Lebanon: { flag: 'ğŸ‡±ğŸ‡§', code: 'LB' },
        'Saint Lucia': { flag: 'ğŸ‡±ğŸ‡¨', code: 'LC' },
        Liechtenstein: { flag: 'ğŸ‡±ğŸ‡®', code: 'LI' },
        'Sri Lanka': { flag: 'ğŸ‡±ğŸ‡°', code: 'LK' },
        Liberia: { flag: 'ğŸ‡±ğŸ‡·', code: 'LR' },
        Lesotho: { flag: 'ğŸ‡±ğŸ‡¸', code: 'LS' },
        Lithuania: { flag: 'ğŸ‡±ğŸ‡¹', code: 'LT' },
        Luxembourg: { flag: 'ğŸ‡±ğŸ‡º', code: 'LU' },
        Latvia: { flag: 'ğŸ‡±ğŸ‡»', code: 'LV' },
        Libya: { flag: 'ğŸ‡±ğŸ‡¾', code: 'LY' },
        Morocco: { flag: 'ğŸ‡²ğŸ‡¦', code: 'MA' },
        Monaco: { flag: 'ğŸ‡²ğŸ‡¨', code: 'MC' },
        Moldova: { flag: 'ğŸ‡²ğŸ‡©', code: 'MD' },
        Montenegro: { flag: 'ğŸ‡²ğŸ‡ª', code: 'ME' },
        'Saint Martin (French Part)': { flag: 'ğŸ‡²ğŸ‡«', code: 'MF' },
        Madagascar: { flag: 'ğŸ‡²ğŸ‡¬', code: 'MG' },
        'North Macedonia': { flag: 'ğŸ‡²ğŸ‡°', code: 'MK' },
        Mali: { flag: 'ğŸ‡²ğŸ‡±', code: 'ML' },
        Burma: { flag: 'ğŸ‡²ğŸ‡²', code: 'MM' },
        Mongolia: { flag: 'ğŸ‡²ğŸ‡³', code: 'MN' },
        Macao: { flag: 'ğŸ‡²ğŸ‡´', code: 'MO' },
        'Northern Mariana Islands': { flag: 'ğŸ‡²ğŸ‡µ', code: 'MP' },
        Martinique: { flag: 'ğŸ‡²ğŸ‡¶', code: 'MQ' },
        Mauritania: { flag: 'ğŸ‡²ğŸ‡·', code: 'MR' },
        Montserrat: { flag: 'ğŸ‡²ğŸ‡¸', code: 'MS' },
        Malta: { flag: 'ğŸ‡²ğŸ‡¹', code: 'MT' },
        Malawi: { flag: 'ğŸ‡²ğŸ‡¼', code: 'MW' },
        Mexico: { flag: 'ğŸ‡²ğŸ‡½', code: 'MX' },
        Malaysia: { flag: 'ğŸ‡²ğŸ‡¾', code: 'MY' },
        Mozambique: { flag: 'ğŸ‡²ğŸ‡¿', code: 'MZ' },
        Namibia: { flag: 'ğŸ‡³ğŸ‡¦', code: 'NA' },
        'New Caledonia': { flag: 'ğŸ‡³ğŸ‡¨', code: 'NC' },
        Niger: { flag: 'ğŸ‡³ğŸ‡ª', code: 'NE' },
        'Norfolk Island': { flag: 'ğŸ‡³ğŸ‡«', code: 'NF' },
        Nigeria: { flag: 'ğŸ‡³ğŸ‡¬', code: 'NG' },
        Nicaragua: { flag: 'ğŸ‡³ğŸ‡®', code: 'NI' },
        Netherlands: { flag: 'ğŸ‡³ğŸ‡±', code: 'NL' },
        Norway: { flag: 'ğŸ‡³ğŸ‡´', code: 'NO' },
        Nepal: { flag: 'ğŸ‡³ğŸ‡µ', code: 'NP' },
        Nauru: { flag: 'ğŸ‡³ğŸ‡·', code: 'NR' },
        Niue: { flag: 'ğŸ‡³ğŸ‡º', code: 'NU' },
        'New Zealand': { flag: 'ğŸ‡³ğŸ‡¿', code: 'NZ' },
        Oman: { flag: 'ğŸ‡´ğŸ‡²', code: 'OM' },
        Panama: { flag: 'ğŸ‡µğŸ‡¦', code: 'PA' },
        Peru: { flag: 'ğŸ‡µğŸ‡ª', code: 'PE' },
        'French Polynesia': { flag: 'ğŸ‡µğŸ‡«', code: 'PF' },
        'Papua New Guinea': { flag: 'ğŸ‡µğŸ‡¬', code: 'PG' },
        Philippines: { flag: 'ğŸ‡µğŸ‡­', code: 'PH' },
        Pakistan: { flag: 'ğŸ‡µğŸ‡°', code: 'PK' },
        Poland: { flag: 'ğŸ‡µğŸ‡±', code: 'PL' },
        'Saint Pierre and Miquelon': { flag: 'ğŸ‡µğŸ‡²', code: 'PM' },
        Pitcairn: { flag: 'ğŸ‡µğŸ‡³', code: 'PN' },
        'Puerto Rico': { flag: 'ğŸ‡µğŸ‡·', code: 'PR' },
        'Palestinian Territory': { flag: 'ğŸ‡µğŸ‡¸', code: 'PS' },
        Portugal: { flag: 'ğŸ‡µğŸ‡¹', code: 'PT' },
        Palau: { flag: 'ğŸ‡µğŸ‡¼', code: 'PW' },
        Paraguay: { flag: 'ğŸ‡µğŸ‡¾', code: 'PY' },
        Qatar: { flag: 'ğŸ‡¶ğŸ‡¦', code: 'QA' },
        RÃ©union: { flag: 'ğŸ‡·ğŸ‡ª', code: 'RE' },
        Romania: { flag: 'ğŸ‡·ğŸ‡´', code: 'RO' },
        Serbia: { flag: 'ğŸ‡·ğŸ‡¸', code: 'RS' },
        Russia: { flag: 'ğŸ‡·ğŸ‡º', code: 'RU' },
        Rwanda: { flag: 'ğŸ‡·ğŸ‡¼', code: 'RW' },
        'Saudi Arabia': { flag: 'ğŸ‡¸ğŸ‡¦', code: 'SA' },
        'Solomon Islands': { flag: 'ğŸ‡¸ğŸ‡§', code: 'SB' },
        Sudan: { flag: 'ğŸ‡¸ğŸ‡©', code: 'SD' },
        Sweden: { flag: 'ğŸ‡¸ğŸ‡ª', code: 'SE' },
        Singapore: { flag: 'ğŸ‡¸ğŸ‡¬', code: 'SG' },
        'Saint Helena, Ascension and Tristan Da Cunha': { flag: 'ğŸ‡¸ğŸ‡­', code: 'SH' },
        Slovenia: { flag: 'ğŸ‡¸ğŸ‡®', code: 'SI' },
        'Svalbard and Jan Mayen': { flag: 'ğŸ‡¸ğŸ‡¯', code: 'SJ' },
        Slovakia: { flag: 'ğŸ‡¸ğŸ‡°', code: 'SK' },
        'Sierra Leone': { flag: 'ğŸ‡¸ğŸ‡±', code: 'SL' },
        'San Marino': { flag: 'ğŸ‡¸ğŸ‡²', code: 'SM' },
        Senegal: { flag: 'ğŸ‡¸ğŸ‡³', code: 'SN' },
        Somalia: { flag: 'ğŸ‡¸ğŸ‡´', code: 'SO' },
        Suriname: { flag: 'ğŸ‡¸ğŸ‡·', code: 'SR' },
        'South Sudan': { flag: 'ğŸ‡¸ğŸ‡¸', code: 'SS' },
        'Sao Tome and Principe': { flag: 'ğŸ‡¸ğŸ‡¹', code: 'ST' },
        'El Salvador': { flag: 'ğŸ‡¸ğŸ‡»', code: 'SV' },
        'Sint Maarten (Dutch Part)': { flag: 'ğŸ‡¸ğŸ‡½', code: 'SX' },
        Syria: { flag: 'ğŸ‡¸ğŸ‡¾', code: 'SY' },
        Eswatini: { flag: 'ğŸ‡¸ğŸ‡¿', code: 'SZ' },
        'Turks and Caicos Islands': { flag: 'ğŸ‡¹ğŸ‡¨', code: 'TC' },
        Chad: { flag: 'ğŸ‡¹ğŸ‡©', code: 'TD' },
        'French Southern Territories': { flag: 'ğŸ‡¹ğŸ‡«', code: 'TF' },
        Togo: { flag: 'ğŸ‡¹ğŸ‡¬', code: 'TG' },
        Thailand: { flag: 'ğŸ‡¹ğŸ‡­', code: 'TH' },
        Tajikistan: { flag: 'ğŸ‡¹ğŸ‡¯', code: 'TJ' },
        Tokelau: { flag: 'ğŸ‡¹ğŸ‡°', code: 'TK' },
        'Timor-Leste': { flag: 'ğŸ‡¹ğŸ‡±', code: 'TP' },
        Turkmenistan: { flag: 'ğŸ‡¹ğŸ‡²', code: 'TM' },
        Tunisia: { flag: 'ğŸ‡¹ğŸ‡³', code: 'TN' },
        Tonga: { flag: 'ğŸ‡¹ğŸ‡´', code: 'TO' },
        Turkey: { flag: 'ğŸ‡¹ğŸ‡·', code: 'TR' },
        'Trinidad and Tobago': { flag: 'ğŸ‡¹ğŸ‡¹', code: 'TT' },
        Tuvalu: { flag: 'ğŸ‡¹ğŸ‡»', code: 'TV' },
        'Taiwan*': { flag: 'ğŸ‡¹ğŸ‡¼', code: 'TW' },
        Tanzania: { flag: 'ğŸ‡¹ğŸ‡¿', code: 'TZ' },
        Ukraine: { flag: 'ğŸ‡ºğŸ‡¦', code: 'UA' },
        Uganda: { flag: 'ğŸ‡ºğŸ‡¬', code: 'UG' },
        'United States Minor Outlying Islands': { flag: 'ğŸ‡ºğŸ‡²', code: 'UM' },
        US: { flag: 'ğŸ‡ºğŸ‡¸', code: 'US' },
        Uruguay: { flag: 'ğŸ‡ºğŸ‡¾', code: 'UY' },
        Uzbekistan: { flag: 'ğŸ‡ºğŸ‡¿', code: 'UZ' },
        'Saint Vincent and the Grenadines': { flag: 'ğŸ‡»ğŸ‡¨', code: 'VC' },
        Venezuela: { flag: 'ğŸ‡»ğŸ‡ª', code: 'VE' },
        'Virgin Islands, British': { flag: 'ğŸ‡»ğŸ‡¬', code: 'VG' },
        'Virgin Islands, U.S.': { flag: 'ğŸ‡»ğŸ‡®', code: 'VI' },
        Vietnam: { flag: 'ğŸ‡»ğŸ‡³', code: 'VN' },
        Vanuatu: { flag: 'ğŸ‡»ğŸ‡º', code: 'VU' },
        'Wallis and Futuna': { flag: 'ğŸ‡¼ğŸ‡«', code: 'WF' },
        Samoa: { flag: 'ğŸ‡¼ğŸ‡¸', code: 'WS' },
        Kosovo: { flag: 'ğŸ‡½ğŸ‡°', code: 'XK' },
        Yemen: { flag: 'ğŸ‡¾ğŸ‡ª', code: 'YE' },
        Mayotte: { flag: 'ğŸ‡¾ğŸ‡¹', code: 'YT' },
        'South Africa': { flag: 'ğŸ‡¿ğŸ‡¦', code: 'ZA' },
        Zambia: { flag: 'ğŸ‡¿ğŸ‡²', code: 'ZM' },
        Zimbabwe: { flag: 'ğŸ‡¿ğŸ‡¼', code: 'ZW' },
      };
      var countriesKeys = Object.keys(countriesInfo);
      var selectedBeforeSummary;
      var confirmedPalette = JSC.colorToPalette(tooltipPalette[0], { lightness: 0.6 }, 8, 0).reverse().slice(0, 7);
      var activePalette = JSC.colorToPalette(tooltipPalette[1], { lightness: 0.8 }, 7, 0).reverse().slice(0, 7);
      var recoveredPalette = JSC.colorToPalette(tooltipPalette[2], { lightness: 1 }, 7, 0).reverse().slice(0, 6);
      var deathsPalette = JSC.colorToPalette(tooltipPalette[3], { lightness: 0.8 }, 7, 0).reverse().slice(0, 6);
      var tabs = ['Active', 'Recovered', 'Deaths'];
      var timer;

      makeBubbleScatter();
      function makeBubbleScatter() {
        var data;
        var chart, map;
        var mapSerId = 'mapSerTime';
        var startDate, endDate, currentDate;
        var lastSliderVal;
        var racebarColorLookup = {};

        /*	var chartTitleOptions = {		fontSize: '16px',		autoWrap: 'wrap'	};*/
        var palette = confirmedPalette;
        var selectedType = 'Active';
        var bubbleSizeBy = 'Deaths';
        var selectedCountries = ['US', 'BR', 'RU'];
        updateColors(selectedCountries);
        var isPlaying;
        if (!chart) {
          JSC.fetch('https://raw.githubusercontent.com/datasets/covid-19/master/data/countries-aggregated.csv')
            .then(function (response) {
              return response.text();
            })
            .then(function (text) {
              data = JSC.csv2Json(text, {
                coerce: function (d, i) {
                  return {
                    Date: +new Date(d.Date),
                    Country: d.Country,
                    Confirmed: +d.Confirmed,
                    Active: d.Confirmed - d.Recovered - d.Deaths,
                    Recovered: +d.Recovered,
                    Deaths: +d.Deaths,
                  };
                },
              });
              JSC.fetch(
                'https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv'
              )
                .then(function (response) {
                  return response.text();
                })
                .then(function (text) {
                  var greenlandData = JSC.csv2Json(text, {
                    coerce: function (d, i) {
                      return {
                        Date: +new Date(d.Date),
                        Country: d['Province/State'],
                        Confirmed: +d.Confirmed,
                        Active: d.Confirmed - d.Recovered - d.Deaths,
                        Recovered: +d.Recovered,
                        Deaths: +d.Deaths,
                      };
                    },
                  }).filter(function (x) {
                    return x.Country === 'Greenland';
                  });
                  data = data.concat(greenlandData);
                  startDate = JSC.formatDate(data[0].Date, 'd');
                  endDate = JSC.formatDate(data[data.length - 1].Date, 'd');
                  var emptyCounties = ['Turkmenistan', 'North Korea', 'Lesotho'];
                  emptyCounties.forEach(function (item) {
                    if (
                      data.find(function (x) {
                        return x.id === item;
                      }) === undefined
                    ) {
                      for (var i = new Date(startDate); i <= new Date(endDate); i = addDays(i, 1)) {
                        data.push({
                          Date: i,
                          Country: item,
                          Confirmed: 0,
                          Active: 0,
                          Recovered: 0,
                          Deaths: 0,
                        });
                      }
                    }
                  });
                  currentDate = endDate;
                  chart = renderChart(data, function (chrt) {
                    map = renderMap(data);
                    playPause(true, data, chrt);
                  });
                });
            });
        }

        function renderMap(data) {
          var unselectTimer;
          var chartRendered;
          return JSC.chart(
            'mapDiv3',
            {
              type: 'map solid',
              animation_duration: 0,
              defaultSeries: {
                pointSelection: 'multiple',
                shape: { padding: -0.01 },
              },
              legend: {
                position: 'bottom',
                template: '%icon,%name',
                defaultEntry: {
                  icon_width: 10,
                  style_fontSize: 10,
                },
                customEntries: makeMapLegendEntries(activePalette),
              },
              events_pointSelectionChanged: function (items) {
                var ids = items.map(function (item) {
                  return item.id;
                });
                selectedCountries = ids;
                this.uiItems('global').options({ visible: ids.length > 1 });
                document.getElementById('chartTitle3').innerHTML = makeTitle(
                  JSC.formatDate(currentDate, 'm'),
                  (ids.length < 6 ? idsToNames(ids) : idsToFlags(ids)).join(', ')
                );
                chart.series(0).options({ points: makeChartSeries(data)[0].points });
              },
              annotations: [
                {
                  position: 'inside top left',
                  fill: 'white',
                  label: {
                    text: 'Select countries to compare:',
                    style: { fontSize: '16px' },
                  },
                },
              ],
              palette: makeSmartPalette(activePalette, 'active'),
              defaultPoint: {
                tooltip:
                  '<b>%name</b><br>' +
                  'Confirmed: <b><span style="color:' +
                  tooltipPalette[0] +
                  '">%confirmed</span></b><br>' +
                  'Active: <b><span style="color:' +
                  tooltipPalette[1] +
                  '">%active</span></b><br>' +
                  'Recovered: <b><span style="color:' +
                  tooltipPalette[2] +
                  '">%recovered</span></b><br>' +
                  'Deaths: <b><span style="color:' +
                  tooltipPalette[3] +
                  '">%deaths</span></b>',
                outline: { color: 'white', width: 0.5 },
                focusGlow: false,
                states: {
                  hover: { fill: 'currentColor', outline: { color: 'black', width: 1 } },
                  select: { enabled: true, fill: 'currentColor', outline: { color: 'black', width: 1 } },
                },
              },
              series: makeMapSeries(data, mapSerId),
              toolbar_items: {
                resetZoom_position: 'inside bottom left',
                caseTypes: {
                  items: generateButtons(),
                  value: 'Active',
                  position: 'outside top',
                  boxVisible: false,
                  label_text: '',
                  width: 280,
                  margin: 5,
                  itemsBox: {
                    layout: 'horizontal',
                    visible: true,
                    margin_top: 5,
                  },
                  defaultItem: {
                    type: 'radio',
                    position: 'top',
                    icon_visible: false,
                    padding: [6, 12, 6, -8],
                    margin: 0,
                    outline_width: 0,
                    fill: '#F5F5F5',
                    label_color: '#BDBDBD',
                    states_select: { label_color: 'white' },
                    states_hover: { label_color: 'white' },
                  },
                  events: {
                    change: function (val) {
                      selectedType = val;
                      playPause(true, data);
                      updateChart(data, val);
                      map.redraw();
                    },
                  },
                },
                global: {
                  type: 'button',
                  visible: false,
                  label: { text: 'Clear', style_fontSize: '14px' },
                  fill: 'white',
                  padding: [4, 8],
                  events_click: function () {
                    map.series(0).points().options({ selected: false });
                  },
                },
              },
            },
            function (c) {
              chartRendered = true;
              var series = c.series(0);
              selectedCountries.forEach(function (item, i) {
                series
                  .points(function (p) {
                    return p.options('id') === item;
                  })
                  .options({ selected: true }, i === selectedCountries.length - 1);
              });
            }
          );
        }

        function renderChart(data, cb) {
          document.getElementById('chartTitle3').innerHTML = makeTitle(
            JSC.formatDate(currentDate, 'm'),
            idsToNames(selectedCountries)
          );
          var chartSeries = makeChartSeries(data);
          return JSC.chart(
            'chartDiv3',
            {
              type: 'bubble',
              // margin_top:40,
              palette: [tooltipPalette[0]],
              legend: { visible: false },
              events_pointSelectionChanged: function (items) {
                var ids = items.map(function (item) {
                  return item.id;
                });
                selectedCountries = ids;
                document.getElementById('chartTitle3').innerHTML = makeTitle(
                  JSC.formatDate(currentDate, 'm'),
                  (ids.length < 6 ? idsToNames(ids) : idsToFlags(ids)).join(', ')
                );
                this.series(0).options({ points: makeChartSeries(data)[0].points });
                map.uiItems('global').options({ visible: ids.length > 1 });
                map.series(0).points().options({ selected: false });
                ids.forEach(function (id) {
                  map.series(0).points(id).options({ selected: true });
                });
              },
              defaultPoint: {
                outline_width: 0,
                legendEntry_visible: false,
                label: { text: '%name', style_fontSize: '14px' },
                tooltip:
                  '<b>%name</b><br>' +
                  'Confirmed: <b><span style="color:' +
                  tooltipPalette[0] +
                  '">%confirmed</span></b><br>' +
                  'Active: <b><span style="color:' +
                  tooltipPalette[1] +
                  '">%active</span></b><br>' +
                  'Recovered: <b><span style="color:' +
                  tooltipPalette[2] +
                  '">%recovered</span></b><br>' +
                  'Deaths: <b><span style="color:' +
                  tooltipPalette[3] +
                  '">%deaths</span></b>',
                states_select: {
                  opacity: 1,
                  fill: 'currentColor',
                },
              },
              yAxis: {
                label_text: 'Confirmed cases',
                alternateGridFill: 'none',
                formatString: 'a',
                scale_type: 'logarithmic',
              },
              xAxis: {
                label_text: selectedType + ' cases %',
                defaultTick_label_text: '%value%',
                scale_range: [0, 100],
              },
              defaultSeries: {
                legendEntry_visible: false,
                pointSelection: 'multiple',
                palette: 'default',
              },
              series: chartSeries,
              toolbar_items: {
                zoom_visible: false,
                label: {
                  label: {
                    text: 'Bubble size: ',
                    style_fontSize: 14,
                  },
                  margin_bottom: 44,
                  position: 'top left',
                  boxVisible: false,
                },
                bubbleSize: {
                  type: 'select',
                  position: 'top left',
                  items: tabs.join(','),
                  value: bubbleSizeBy,
                  margin_bottom: 44,
                  label_style_fontSize: 14,
                  events_change: function (val) {
                    bubbleSizeBy = val;
                    var chartSeries = makeChartSeries(data);
                    setTimeout(function () {
                      chart.series(0).points(chartSeries[0].points);
                    }, 20);
                  },
                },
                logScale: {
                  type: 'toggle',
                  position: 'inside top right',
                  value: true,
                  label_text: 'Logarithmic',
                  events_change: function (val) {
                    chart.axes('y').options({ scale_type: val ? 'logarithmic' : 'auto' });
                  },
                },
                sliderWrapper: {
                  itemsBox_visible: false,
                  position: 'inside top left',
                  offset: '0,-42',
                  boxVisible: false,
                  label_text: '',
                  itemsBox: { visible: true },
                  defaultItem: { boxVisible: false },
                  items: {
                    slider: {
                      type: 'range',
                      width: 180,
                      throttle: 0,
                      value: new Date(currentDate).getTime(),
                      min: new Date(startDate).getTime(),
                      max: new Date(endDate).getTime(),
                      events_change: function (val) {
                        if (lastSliderVal === val) {
                          return;
                        }
                        updateSliderTitle(val);
                        if (!isPlaying) {
                          updateFromSlider(val, data);
                        } else {
                          moveSlider(val, data);
                          playPause(true, data);
                        }

                        resizeDivs();
                        lastSliderVal = val;
                      },
                      itemsBox: { visible: true },
                    },
                    Stop: {
                      type: 'option',
                      height: 20,
                      value: false,
                      margin: [6, 6, 6, 16],
                      icon_name: 'system/default/pause',
                      icon_size: 20,
                      label_text: '',
                      events_change: function (val) {
                        playPause(val, data);
                      },
                    },
                  },
                },
              },
            },
            cb
          );
        }

        function makeMapSeries(data, id) {
          var series = JSC.nest()
            .key('Country')
            .pointRollup(function (key, val) {
              var values = val[0];
              return {
                map: getCountryCode(key),
                id: getCountryCode(key),
                z: values[selectedType],
                attributes: {
                  confirmed: values.Confirmed,
                  active: values.Active,
                  recovered: values.Recovered,
                  deaths: values.Deaths,
                  deathRate:
                    values.Confirmed >= 1000
                      ? JSC.formatNumber((values.Deaths / values.Confirmed) * 100, 'n2') + '%'
                      : 'not enough data',
                },
              };
            })
            .series(
              data.filter(function (x) {
                return formatDateCached(x.Date) === currentDate && countriesInfo[x.Country] !== undefined;
              })
            );
          if (id) {
            series.id = id;
          }
          return series;
        }

        function makeUpdateMapSeries(data, id) {
          var series = JSC.nest()
            .key('Country')
            .pointRollup(function (key, val) {
              var values = val[0];
              return {
                id: getCountryCode(key),
                z: values[selectedType],
                attributes: {
                  confirmed: values.Confirmed,
                  active: values.Active,
                  recovered: values.Recovered,
                  deaths: values.Deaths,
                  deathRate:
                    values.Confirmed >= 1000
                      ? JSC.formatNumber((values.Deaths / values.Confirmed) * 100, 'n2') + '%'
                      : 'not enough data',
                },
              };
            })
            .series(
              data.filter(function (x) {
                return countriesInfo[x.Country] !== undefined && formatDateCached(x.Date) === currentDate;
                //return countriesInfo[x.Country] !== undefined && JSC.formatDate(x.Date, 'd') === currentDate;
              })
            );
          if (id) {
            series.id = id;
          }
          return series;
        }

        function makeChartSeries(data) {
          var series = [
            {
              points: JSC.nest()
                .key('Country')
                .pointRollup(function (key, val) {
                  var values = val[0];
                  var result = {
                    selected: false,
                    name: values.Country,
                    opacity: 0.5,
                    color: '#b0b0b0',
                    label_visible: false,
                    x: (values[selectedType] / values.Confirmed) * 100,
                    y: +values.Confirmed,
                    z: +values[bubbleSizeBy],
                    id: getCountryCode(key),
                    attributes: {
                      confirmed: values.Confirmed,
                      active: values.Active,
                      recovered: values.Recovered,
                      deaths: values.Deaths,
                    },
                  };
                  selectedCountries.forEach(function (item, i) {
                    if (getCountryCode(key) === item) {
                      result.selected = true;
                      result.color = getRaceBarColor(values.Country);
                      result.opacity = 1;
                      result.label_visible = true;
                    }
                  });
                  return result;
                })
                .points(
                  data.filter(function (x) {
                    return (
                      formatDateCached(x.Date) === currentDate &&
                      countriesInfo[x.Country] !== undefined &&
                      x.Confirmed !== 0
                    );
                  })
                ),
            },
          ];
          series.forEach(function (item, i) {
            item.points = item.points.filter(function (x) {
              return x !== undefined && x !== null;
            });
          });
          return series;
        }

        function updateChart(data, type) {
          var entries, palette;
          switch (type) {
            case 'Confirmed':
              entries = makeMapLegendEntries(confirmedPalette);
              palette = makeSmartPalette(confirmedPalette, 'confirmed');
              chart.options({ palette: [tooltipPalette[0]] }, false);
              break;
            case 'Active':
              entries = makeMapLegendEntries(activePalette);
              palette = makeSmartPalette(activePalette, 'active');
              chart.options({ palette: [tooltipPalette[1]] }, false);
              break;
            case 'Recovered':
              entries = makeMapLegendEntries(recoveredPalette);
              palette = makeSmartPalette(recoveredPalette, 'recovered');
              chart.options({ palette: [tooltipPalette[2]] }, false);
              break;
            case 'Deaths':
              entries = makeMapLegendEntries(deathsPalette);
              palette = makeSmartPalette(deathsPalette, 'deaths');
              chart.options({ palette: [tooltipPalette[3]] }, false);

              break;
          }
          map.options({ palette: palette });
          map.legends(0).entries().remove(false);
          map.legends(0).options({ customEntries: entries });
          if (map.legends(0).entries().items.length > entries.length) {
            map.legends(0).entries(7).remove();
          }

          document.getElementById('chartTitle3').innerHTML = makeTitle(
            JSC.formatDate(currentDate, 'm'),
            (selectedCountries.length < 6 ? idsToNames(selectedCountries) : idsToFlags(selectedCountries)).join(', ')
          );

          var chartSeries = makeChartSeries(data);
          chart.axes('x').options({ label_text: type + ' cases %' });
          setTimeout(function () {
            chart.series(0).points(chartSeries[0].points);
          }, 20);
        }

        function updateSliderTitle(date) {
          currentDate = JSC.formatDate(
            new Date(new Date(date).getFullYear(), new Date(date).getMonth(), new Date(date).getDate()),
            'd'
          );
          document.getElementById('chartTitle3').innerHTML = makeTitle(
            JSC.formatDate(currentDate, 'm'),
            (selectedCountries.length < 6 ? idsToNames(selectedCountries) : idsToFlags(selectedCountries)).join(', ')
          );
        }

        function moveSlider(date, data) {
          currentDate = JSC.formatDate(
            new Date(new Date(date).getFullYear(), new Date(date).getMonth(), new Date(date).getDate()),
            'd'
          );

          chart.uiItems('slider').options({ value: new Date(currentDate).getTime() });

          updateFromSlider(date, data);
        }

        function updateFromSlider(date, data) {
          currentDate = JSC.formatDate(
            new Date(new Date(date).getFullYear(), new Date(date).getMonth(), new Date(date).getDate()),
            'd'
          );

          var mapSeries = makeUpdateMapSeries(data, mapSerId);
          var chartSeries = makeChartSeries(data);
          map.series(0).options({ points: mapSeries[0].points });
          setTimeout(function () {
            chart.series(0).options({ points: chartSeries[0].points });
          }, 20);
        }

        function animateChart(data) {
          clearInterval(timer);
          timer = setInterval(function () {
            if (new Date(currentDate).getTime() < new Date(endDate).getTime()) {
              currentDate = addDays(currentDate, 1);
              //moveSlider(currentDate, data);
              chart.uiItems('slider').options({ value: new Date(currentDate).getTime() });
              document.getElementById('chartTitle3').innerHTML = makeTitle(
                JSC.formatDate(currentDate, 'm'),
                (selectedCountries.length < 6 ? idsToNames(selectedCountries) : idsToFlags(selectedCountries)).join(
                  ', '
                )
              );
              updateFromSlider(currentDate, data);
            } else {
              playPause(true, data);
            }
          }, 800);
        }

        function playPause(val, data, chrt) {
          var c = chrt || chart;
          if (val) {
            c.uiItems('Stop').options({ label_text: 'Play', icon_name: 'system/default/play', value: val });
            clearInterval(timer);
            isPlaying = false;
          } else {
            c.uiItems('Stop').options({ label_text: 'Pause', icon_name: 'system/default/pause', value: val });
            isPlaying = true;
            var startDateNum = new Date(startDate).getTime(),
              endDateNum = new Date(endDate).getTime();
            if (new Date(currentDate).getTime() === endDateNum) {
              //middle
              var midDateNum = (startDateNum + endDateNum) / 2;

              currentDate = new Date(midDateNum);
              c.uiItems('slider').options({ value: new Date(midDateNum).getTime() });
            }

            animateChart(data);
          }
        }

        function makeTitle(date, country) {
          return 'COVID-19 ' + colorTypeText(selectedType) + ': <b>' + date + '</b><br>' + '<b>' + country + '</b>';
        }
        function updateColors(ids) {
          var colors = JSC.getPalette(0);
          racebarColorLookup = {};
          ids.forEach(function (id, i) {
            racebarColorLookup[id] = colors[i % colors.length];
          });
        }
        function getRaceBarColor(id) {
          if (id.length > 2 && countriesInfo[id]) {
            id = countriesInfo[id].code;
          }
          return racebarColorLookup[id];
        }
      }

      function addDays(date, days) {
        return new Date(date).setDate(new Date(date).getDate() + days);
      }

      function formatDateCached(num) {
        if (!dateCache[num]) {
          dateCache[num] = JSC.formatDate(num, 'd');
        }
        return dateCache[num];
      }
      function colorTypeText(type) {
        var typeToColor = {
          Confirmed: tooltipPalette[0],
          Active: tooltipPalette[1],
          Recovered: tooltipPalette[2],
          Deaths: tooltipPalette[3],
        };
        return (
          '<span style="color:' + typeToColor[type] + '">' + type + '</span>' + (type !== 'Deaths' ? ' Cases' : '')
        );
      }
      function getCountryCode(country) {
        return countriesInfo[country] === undefined ? undefined : countriesInfo[country].code;
      }
      function makeSmartPalette(palette, name) {
        var smartPalette = {
          pointValue: function (p) {
            return p.options('attributes_' + name);
          },
          ranges: [{ value: 0, color: '#E0E0E0', legendEntry_visible: false }],
        };
        palette.forEach(function (item, i) {
          smartPalette.ranges.push({
            value: [Math.pow(10, i), Math.pow(10, i + 1) - 1],
            color: item,
            legendEntry_visible: false,
          });
        });
        return smartPalette;
      }

      function makeMapLegendEntries(palette) {
        var customEntries = [{ id: 'e0', name: '0', icon_color: '#E0E0E0' }];
        palette.forEach(function (item, i) {
          var result = {
            id: 'e' + i,
            name: JSC.formatNumber(Math.pow(10, i), 'a') + ' - ' + JSC.formatNumber(Math.pow(10, i + 1), 'a'),
            icon_color: item,
          };
          if (i === palette.length - 1) {
            result = {
              id: 'e' + i,
              name: JSC.formatNumber(Math.pow(10, i), 'a') + '+',
              icon_color: item,
            };
          }
          customEntries.push(result);
        });
        return customEntries;
      }
      function generateButtons() {
        var buttons = {};
        tabs.forEach(function (item, i) {
          buttons[item] = {
            label_text: item,
            states: {
              select: { fill: tooltipPalette[i + 1] },
              hover: { fill: tooltipPalette[i + 1] },
            },
          };
        });
        return buttons;
      }
      function idsToNames(ids) {
        return ids.map(function (id) {
          var found = countriesKeys.find(function (key) {
            if (countriesInfo[key].code === id) {
              return key;
            }
          });
          return found || id;
        });
      }

      function idsToFlags(ids) {
        return ids.map(function (id) {
          var fnd;
          var found = countriesKeys.find(function (key) {
            if (countriesInfo[key].code === id) {
              fnd = countriesInfo[key].flag;
              return countriesInfo[key].flag;
            }
          });
          return fnd || found || id;
        });
      }
      function resizeDivs() {
        document.getElementById('chartDiv3').style.height =
          document.getElementById('firstChartWrapper3').offsetHeight -
          document.getElementById('chartTitle3').offsetHeight +
          'px';
      }
    </script>
  </body>
</html>
