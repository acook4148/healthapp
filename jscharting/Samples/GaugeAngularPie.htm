<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Live Data Donut Arc | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>
    <script type="text/javascript" src="../jsc/modules/types.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      /*CSS*/
    </style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 430px; height: 320px; margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
Donut arc that is used to simulate a circular gauge and updates on a timer.
Learn how to:

  - Draw donut arcs segment.
*/
      // JS
      var INTERVAL_ID;
      var chart = JSC.chart(
        'chartDiv',
        {
          debug: true,
          legend_position: 'right',
          animation_duration: 800,
          defaultSeries: {
            type: 'pie',
            mouseTracking_enabled: false,
            angle: { sweep: 180 },
            shape: {
              center: '50%,60%',
              innerSize: '50%',
              size: '90%',
              defaultLabel: { style_fontSize: 36, verticalAlign: 'middle' },
            },
          },
          palette: {
            pointValue: '%yValue/100',
            colors: ['green', 'yellow', 'red'],
          },
          series: [
            {
              /* Gauge Background */
              points: [{ id: 'fill', color: 'white', y: 100 }],
            },
            {
              id: 'valSer',
              shape: { label: { text: formatLabel(0) } },
              points: [
                {
                  id: 'value',
                  y: 0,
                  outline_width: 0,
                },
                {
                  id: 'gap',
                  color: 'none',
                  y: 100,
                  outline_width: 0,
                },
              ],
            },
          ],
          toolbar_items: {
            Stop: {
              type: 'option',
              icon_name: 'system/default/pause',
              margin: 10,
              boxVisible: true,
              label_text: 'Pause',
              events: { change: playPause },
              states_select_icon_name: 'system/default/play',
              states_select_label_text: 'Play',
            },
          },
        },
        function (c) {
          setGauge(c, 100, Math.random() * 100);
          playPause();
        }
      );

      function setGauge(chrt, max, y) {
        /* Update gauge pie values */
        chrt = chart || chrt;
        debugger;
        chrt.series('valSer').options({
          shape_label: { text: formatLabel(y) },
          points: [
            { id: 'value', y: y },
            { id: 'gap', y: max - y },
          ],
        });
      }

      function formatLabel(value) {
        return JSC.formatNumber(value, 'n1') + '<br/><span color="#696969" fontSize="20px">kW</span>';
      }

      function playPause(val) {
        if (val) {
          clearInterval(INTERVAL_ID);
        } else {
          INTERVAL_ID = setInterval(function () {
            update();
          }, 1000);
        }
      }

      function update() {
        setGauge(chart, 100, Math.random() * 100);
      }
    </script>
  </body>
</html>
