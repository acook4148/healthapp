<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Status Map Chart | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/types.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      /*CSS*/
    </style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 900px; height: 210px; margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
A status map created using the heatmap chart type.
Learn how to:

  - Create a status map from CSV data.
*/
      // JS
      var chart;
      var statuses = [
        /*0*/
        'OK',
        /*1*/
        'NO_WATER',
        /*2*/
        'DOWN',
        /*3*/
        'NO_BEANS',
        /*4*/
        'OFF',
      ];
      var palette = [
        /*OK*/
        '#00C853',
        /*NO_WATER*/
        '#00E5FF',
        /*DOWN*/
        '#ff2a2e',
        /*NO_BEANS*/
        '#795548',
        /*OFF*/
        '#FFEA00',
      ];

      JSC.fetch('./resources/statusmap-data.csv')
        .then(function (response) {
          return response.text();
        })
        .then(function (text) {
          var data = JSC.csv2Json(text);
          chart = renderChart(makeSeries(data));
        });

      function renderChart(series) {
        return JSC.chart('chartDiv', {
          type: 'heatmap solid',
          debug: true,
          legend: {
            position: 'top left',
            defaultEntry: { icon_width: 10 },
          },
          palette: {
            pointValue: function (p) {
              return p.options('z');
            },
            ranges: makePaletteRanges(palette),
          },
          defaultAxis: {
            defaultTick: {
              line_visible: false,
              gridLine_visible: false,
            },
          },
          yAxis_scale_invert: true,
          xAxis_scale_type: 'time',
          defaultSeries_shape_innerPadding: 0.05,
          defaultPoint: {
            outline_width: 0,
            tooltip: '%seriesName <br>{%xValue:g} <br>Status: <b>%status</b>',
          },
          series: series,
          //   series: [
          //     {
          //       name: "Machine A",
          //       points: [
          //         { x: "1/1/21 12:00:00 am", y: "Machine A", z: 0, attributes_status: "OK" },
          //					...
          //       ]
          //     },
          //     {		//...		//  }
          //   ]
        });
      }

      function makeSeries(data) {
        return JSC.nest()
          .key('machine')
          .key('date')
          .pointRollup(function (key, val) {
            var values = val[0];
            return {
              x: values.date,
              y: values.machine,
              z: values.status,
              attributes_status: statuses[values.status],
            };
          })
          .series(data);
      }

      function makePaletteRanges(palette) {
        var ranges = [];
        palette.forEach(function (item, i) {
          ranges.push({
            value: i,
            color: item,
            legendEntry_value: statuses[i].replace(/_/g, ' ').toLowerCase(),
          });
        });
        return ranges;
      }
    </script>
  </body>
</html>
