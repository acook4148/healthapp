<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Column Running Averages | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      /*CSS*/
    </style>
  </head>
  <body>
    <div id="chartDiv" style="max-width: 740px; height: 350px; margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
Calculates running averages over columns.
Learn how to:

  - Calculate running average.
*/
      // JS
      var chart;

      JSC.fetch('./resources/apple-revenue.csv')
        .then(function (response) {
          return response.text();
        })
        .then(function (text) {
          var data = JSC.csv2Json(text);
          chart = renderChart(makeSeries(data));
        })
        .catch(function (error) {
          console.error(error);
        });

      function renderChart(series) {
        return JSC.chart('chartDiv', {
          debug: true,
          type: 'column solid',
          xAxis: {
            scale_type: 'time',
            spacingPercentage: 0.4,
          },
          title_label_text:
            'Apple Revenue and Moving Average<br>' +
            '<span style="color:#9E9E9E; font-size:12px">(by fiscal quarter)</span>',
          legend: {
            // Using left, then top arranges items vertically.
            position: 'inside left top',
            template: '%checkbox,%icon,%name',
          },
          defaultSeries: {
            line_width: 2,
            defaultPoint: {
              tooltip: '%name<br><b>{%yValue:c0}M</b>',
              marker_visible: false,
              outline_width: 0,
            },
          },
          series: series,
        });
      }

      function makeSeries(data) {
        var columns = data.map(function (item) {
          return {
            x: new Date(+item.date.slice(3, 7), +item.date.slice(1, 2) * 3 - 3, 1).getTime(),
            y: item.revenue,
            name: item.date,
          };
        });
        return [
          { name: 'Revenue', points: columns },
          {
            type: 'line',
            name: '4 Quarter MA',
            points: runningAverage(columns, 4),
          },
          {
            type: 'line',
            name: '8 Quarter MA',
            visible: false,
            points: runningAverage(columns, 8),
          },
        ];
      }

      function runningAverage(data, period) {
        var sum = [];
        var result = [];
        for (let i = 0; i < data.length; i++) {
          sum.push(data[i].y);
          if (i > period - 1) {
            sum.shift();
            result.push({
              x: data[i].x,
              y: JSC.sum(sum) / period,
              name: data[i].name,
            });
          }
        }
        return result;
      }
    </script>
  </body>
</html>
