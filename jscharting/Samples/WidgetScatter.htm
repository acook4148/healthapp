<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Scatter Widget | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style>
      #widgetsWrapper {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        background: #eeeeee;
        padding: 20px;
        box-sizing: border-box;
        width: 100%;
      }
      .chartDiv {
        width: 100%;
        background: white;
        box-sizing: content-box;
        margin: 8px;
        padding: 15px;
        border-radius: 10px;
      }
    </style>
  </head>
  <body>
    <div id="widgetsWrapper">
      <div id="chartDiv1" class="chartDiv" style="max-width: 600px; height: 400px;"></div>
      <div id="chartDiv2" class="chartDiv" style="max-width: 300px; height: 200px;"></div>
    </div>

    <script type="text/javascript">
      /*
Scatter chart dashboard widgets.
Learn how to:

  - Use scatter charts as smaller chart widgets.
*/
      // JS

      /* Default Widget Options */
      var scatterWidgetDefaults = {
        title: 'Scatter',
        series: [
          {
            points: [
              { name: 'Point1', x: 1, y: 1 },
              { name: 'Point2', x: 3, y: 2 },
              { name: 'Point3', x: 7, y: 5 },
              { name: 'Point4', x: 2, y: 3 },
              { name: 'Point5', x: 4, y: 4 },
              { name: 'Point6', x: 0, y: 2 },
            ],
          },
        ],
        axes: { x: { label: 'xAxis' }, y: { label: 'yAxis' } },
        palette: 0,
        legend: false,
      };

      var chart1, chart2, chart3;

      JSC.fetch('./resources/fertilityRateAndLifeExpectancy.csv')
        .then(function (response) {
          return response.text();
        })
        .then(function (text2) {
          var data2 = JSC.csv2Json(text2);
          chart1 = new ScatterWidget('chartDiv1', {
            title: 'Fertility Rate vs. Life Expectancy',
            series: [
              {
                name: '1960',
                type: 'marker',
                points: data2.map(function (item) {
                  return { x: item.fertility_rate1960, y: item.life_expectancy1960, name: item.country };
                }),
              },
              {
                name: '1990',
                type: 'marker',
                points: data2.map(function (item) {
                  return { x: item.fertility_rate1990, y: item.life_expectancy1990, name: item.country };
                }),
              },
              {
                name: '2016',
                type: 'marker',
                points: data2.map(function (item) {
                  return { x: item.fertility_rate2016, y: item.life_expectancy2016, name: item.country };
                }),
              },
            ],
            axes: {
              x: { label: 'Fertility Rate' },
              y: { label: 'Life Expectancy' },
            },
          });
          chart2 = new ScatterWidget('chartDiv2', {});
        });

      /* WIDGET DEFINITION */

      /* Widget Constructor */
      function ScatterWidget(div, options) {
        /* Config refers to JSC options, options refers to widget options. */
        this.currentConfig = this.normalizeOptions(JSC.merge({}, scatterWidgetDefaults, options));
        this.chart = new JSC.chart(
          div,
          JSC.merge(
            {
              type: 'marker',
              title: {
                margin_bottom: 15,
                label_style: { fontWeight: 'bold', fontSize: 16 },
              },
              legend: {
                template: '%icon,%name',
                position: 'bottom',
              },
              defaultAxis: {
                alternateGridFill: 'none',
                defaultTick: {
                  gridLine_color: '#EEEEEE',
                  line_color: '#EEEEEE',
                  label_color: '#9E9E9E',
                },
              },
              defaultTooltip: {
                fill: '#263238',
                shadow: false,
                outline_width: 0,
                opacity: 0.9,
                padding: 10,
                radius: 4,
                label_color: 'white',
              },
              defaultPoint: {
                outline_width: 0,
                tooltip: '<b>%name</b><br>%xAxisLabel: <b>%xValue</b><br>%yAxisLabel: <b>{%yValue:n1}</b>',
                opacity: 0.7,
                marker: { type: 'circle', outline_width: 0 },
              },
            },
            this.currentConfig
          )
        );
      }

      /**
       * Returns chart configuration only for specified options.
       * @param options - Widget options.
       * @returns {{}} - Chart configuration.
       */
      ScatterWidget.prototype.normalizeOptions = function (options) {
        var result = {};
        var axesData = options.axes;

        if (options.title) {
          result.title_label_text = options.title;
        }
        if (options.series) {
          result.series = options.series;
        }
        if (options.palette) {
          result.palette = options.palette;
        }

        result.legend_visible = options.legend ? options.legend : false;

        if (options.axes) {
          result.yAxis = {
            label_text: axesData.y ? axesData.y.label : '',
            formatString: axesData.y ? axesData.y.formatValue : 'n',
          };
          result.xAxis = {
            label_text: axesData.x ? axesData.x.label : '',
            formatString: axesData.x ? axesData.x.formatValue : 'n',
          };
          result.zAxis = {
            label_text: axesData.z ? axesData.z.label : '',
            formatString: axesData.z ? axesData.z.formatValue : 'n',
          };
        }

        return result;
      };

      /**
       * Updates the chart based on provided options.
       * @param options - Widget options
       * @param updateOptions - Update options such as animation duration.
       */
      ScatterWidget.prototype.options = function (options, updateOptions) {
        var newConfig = this.normalizeOptions(options);
        /* Maintain chart configuration. */
        JSC.merge(this.currentConfig, newConfig);
        /* Update the chart. */
        this.chart.options(newConfig, updateOptions);
      };
    </script>
  </body>
</html>
