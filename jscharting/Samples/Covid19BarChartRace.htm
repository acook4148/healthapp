<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Animated Covid Bar Chart Race | JSCharting</title>
    <meta http-equiv="content-type" content="text-html; charset=utf-8" />

    <script type="text/javascript" src="../jsc/jscharting.js"></script>

    <script type="text/javascript" src="../jsc/modules/toolbar.js"></script>

    <link rel="stylesheet" type="text/css" href="css/default.css" />

    <style></style>
  </head>
  <body>
    <div id="chartDiv" style="width: 480px; height: 600px; margin: 0px auto;"></div>

    <script type="text/javascript">
      /*
An animated bar chart race of Covid infections for key countries.
Learn how to:

  - Create a bar chart race animation.
*/
      // JS
      var chart, timer;
      var startDate, endDate;
      var pointsColor = '#d53838';

      JSC.fetch('https://raw.githubusercontent.com/datasets/covid-19/master/data/key-countries-pivoted.csv')
        .then(function (response) {
          return response.text();
        })
        .then(function (text) {
          var data = JSC.csv2Json(text);
          startDate = JSC.formatDate(data[0].Date, 'd');
          endDate = JSC.formatDate(data[data.length - 1].Date, 'd');
          chart = renderChart(data);
        })
        .catch(function (error) {
          console.error(error);
        });

      function renderChart(data) {
        var frameDelay = 10,
          stopped,
          currentDate = startDate;

        return JSC.chart(
          'chartDiv',
          {
            type: 'horizontal column solid',
            // Controls the speed of the animation and the chart.
            animation_duration: 300,
            margin_right: 30,
            yAxis: {
              // Lock the scale minimum at 0 and use 10% padding (of data) for max.
              scale_range: { padding: 0.1, min: 0 },
              // Dont make room for tick labels overflow. The chart level margin_right: 30, setting will ensure there is enough space for them.
              overflow: 'hidden',
              // on top.
              orientation: 'opposite',
            },
            title: {
              label: {
                margin_bottom: 40,
                text: 'Covid-19: Total Cases for Key Countries',
                style_fontSize: 18,
              },
            },
            palette: [pointsColor],
            legend: { visible: false },
            defaultPoint: { label_text: '%yValue' },
            defaultSeries_mouseTracking_enabled: false,
            annotations: [
              {
                id: 'date',
                margin: 10,
                label: {
                  text: formatAnnotation(startDate),
                  style: {
                    fontSize: 24,
                    fontWeight: 'bold',
                  },
                },
                position: 'inside bottom right',
              },
            ],
            series: makeSeries(data),
            toolbar: {
              defaultItem: {
                position: 'inside top',
                // Move outside the chart area
                offset: '0,-65',
                boxVisible: false,
                margin: 6,
              },
              items: {
                slider: {
                  type: 'range',
                  width: 300,
                  // Reduce chart update frequency to smooth slider action.
                  debounce: 20,
                  value: new Date(startDate).getTime(),
                  min: new Date(startDate).getTime(),
                  max: new Date(endDate).getTime(),
                  events_change: function (val) {
                    moveSlider(val);
                    chart.uiItems('Pause').options({ value: true });
                    playPause(true);
                    clearInterval(timer);
                  },
                },
                Pause: {
                  type: 'option',
                  value: false,
                  width: 50,
                  margin: [6, 6, 6, 16],
                  icon_name: 'system/default/pause',
                  label_text: 'Pause',
                  events_change: function (val) {
                    playPause(val);
                  },
                },
              },
            },
          },
          function (c) {
            playPause(false, c);
          }
        );

        function makeSeries() {
          var keyCountries = [];
          var points = [];
          for (var country in data[0]) {
            if (country !== 'Date') {
              keyCountries.push(country);
            }
          }
          keyCountries.forEach(function (item, i) {
            points.push(
              JSC.nest()
                .key('Date')
                .pointRollup(function (key, val) {
                  var values = val[0],
                    name = item === 'United_Kingdom' ? 'UK' : item;
                  return {
                    x: name,
                    y: values[item],
                    id: name,
                  };
                })
                .points(
                  data.filter(function (x) {
                    return JSC.formatDate(x.Date, 'd') === currentDate;
                  })
                )[0]
            );
          });
          var series = [{ points: points }];
          series[0].points.sort(function (a, b) {
            return b.y - a.y;
          });
          return series;
        }

        function moveSlider(date, cb) {
          currentDate = JSC.formatDate(
            new Date(new Date(date).getFullYear(), new Date(date).getMonth(), new Date(date).getDate()),
            'd'
          );

          // Update chart label and slider
          chart.annotations('date').options({ label_text: formatAnnotation(currentDate) });
          chart.uiItems('slider').options({ value: new Date(date).getTime() });

          // Update points. The then: cb update option will execute the callback once the animation is finished.
          chart.series(0).options(makeSeries(data)[0], { then: cb });
        }

        function animateChart() {
          if (!stopped) {
            timer = setTimeout(function () {
              var dt = new Date(currentDate);
              currentDate = dt.setDate(dt.getDate() + 1);
              if (currentDate >= new Date(endDate).getTime()) {
                clearInterval(timer);
                currentDate = startDate;
                chart.uiItems('slider').options({ value: new Date(currentDate).getTime() });
                playPause(true);
              }
              moveSlider(currentDate, animateChart);
            }, frameDelay);
          }
        }

        function playPause(val, chrt) {
          var c = chrt || chart;
          if (val) {
            // Stop
            c.uiItems('Pause').options({ label_text: 'Play', icon_name: 'system/default/play' });
            clearInterval(timer);
            stopped = true;
          } else {
            // Play
            c.uiItems('Pause').options({ label_text: 'Pause', icon_name: 'system/default/pause' });
            stopped = false;
            animateChart();
          }
        }

        function formatAnnotation(date) {
          return JSC.formatDate(date, 'm');
        }
      }
    </script>
  </body>
</html>
